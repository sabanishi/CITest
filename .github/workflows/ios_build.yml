name: iOS Build

on:
  workflow_dispatch:

jobs:
  build_unity:
    name: Build iOS
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove unnecessary files
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      - name: Cache Library folder
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-$(hashFiles('**/Packages/manifest.json'))
          restore-keys: |
            Library-
      
      - name: Build iOS
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: .
          targetPlatform: iOS
          buildName: build
          buildsPath: build

      - name: Upload to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Build-iOS
          path: build/iOS
  
  build_xcode:
    name: Build XCode Project
    runs-on: macos-latest
    needs: build_unity

    env:
      IOS_APP_ID: com.DefaultCompany.CISample
      IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}
      CERTIFICATES_PATH: ${{ format('{0}/Certificates.p12', github.workspace) }}
      MOBILEPROVISION_PATH: ${{ format('{0}/Target.mobileprovision', github.workspace) }}
      IPA_OUTPUT_PATH: ${{ format('{0}/Build.ipa', github.workspace) }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MATCH_PERSONAL_ACCESS_TOKEN }}
      MATCH_REPOSITORY_ACCOUNT: ${{ secrets.MATCH_REPOSITORY_ACCOUNT }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: Build-iOS
          path: build/iOS

      - name: Fix File Permissions
        run: |
          find $IOS_BUILD_PATH type f -name "**.sh" -exec chmod +x {} \;

      - name: Cache Library folder
        uses: actions/cache@v3
        with:
          path: |
            Library
            build/iOS
          key: Library-iOS-
          restore-keys: Library-
      
      - name: Cache restore cocoapods
        uses: actions/cache@v2
        if: ${{ always() }}
        with:
          path: |
            build/iOS/iOS/Pods
            ~/.cocoapods/repos
          key: Pods-${{ hashFiles('**/Podfile') }}
          restore-keys: Pods-

      - name: Write Key Files
        env:
          CERTIFICATES_P12: ${{ secrets.CERTIFICATES_P12 }}
          MOBILEPROVISION: ${{ secrets.MOBILEPROVISION }}
        run: |
          echo "$CERTIFICATES_P12" | base64 --decode > $CERTIFICATES_PATH
          echo "$MOBILEPROVISION" | base64 --decode > $MOBILEPROVISION_PATH

      - uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.7

      - name: Prepare for fastlane # GateKeeper対策
        run: |
          sudo spctl --master-disable

      - name: Build XCode
        uses: maierj/fastlane-action@v2.0.1
        with:
          lane: 'ios build'

      - name: run if fail_step failed # ビルドがコケた原因がわかるようにcatしておきます
        if: failure()
        run: cat /Users/runner/Library/Logs/gym/*Unity-iPhone.log
      
      - name: Upload to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Build-iOS-ipa
          path: ${{ env.IPA_OUTPUT_PATH }}

      - name: Cleanup
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: Build-iOS
  
  upload_to_deploygate:
    name: Upload to DeployGate
    runs-on: ubuntu-latest
    needs: build_xcode

    env:
      DEPLOYGATE_API_KEY: ${{ secrets.DEPLOYGATE_API_KEY }}
      DEPLOYGATE_USER_NAME: ${{ secrets.DEPLOYGATE_USER_NAME }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
    
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: Build-iOS-ipa

      - name: Upload to DeployGate
        run: |
          IPA_PATH=$(find build -name "*.ipa" | head -n 1)
          echo "Uploading $IPA_PATH to DeployGate"
          RESPONSE=$(curl -s -F "file=@$IPA_PATH" \
               -F "token=$DEPLOYGATE_API_KEY" \
               -F "message=New build from GitHub Actions" \
               https://deploygate.com/api/users/$DEPLOYGATE_USER_NAME/apps)
          APP_URL=$(echo $RESPONSE | jq -r '.results.revision_url')
          APP_URL=$(echo "$APP_URL" | sed "s|\*\*\*|$DEPLOYGATE_USER_NAME|")
          AUTHOR_NAME=${{ github.event.client_payload.name }}
          echo "DeployGate App URL: $APP_URL"
          echo $RESPONSE
          echo "DeployGate App URL: $APP_URL"
          
          MESSAGE="@here \nデプロイが完了しましたよ！\n$APP_URL"
          echo "Sending message to Discord: $MESSAGE"

          curl -H "Content-Type: application/json" \
               -d "{\"content\": \"$MESSAGE\"}" \
               $DISCORD_WEBHOOK_URL