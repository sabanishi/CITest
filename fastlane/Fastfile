keychain_name = "temporary_keychain"
keychain_password = SecureRandom.base64

platform :ios do

  desc "Create Development .ipa"
  lane :build do
    cocoapods(podfile: "#{ENV['IOS_BUILD_PATH']}/build/Podfile")
    disable_automatic_code_signing(path: "#{ENV['IOS_BUILD_PATH']}/build/Unity-iPhone.xcodeproj")
    certificates
    update_project_provisioning(
      xcodeproj: "#{ENV['IOS_BUILD_PATH']}/build/Unity-iPhone.xcodeproj",
      target_filter: "Unity-iPhone",
      profile: ENV["sigh_#{ENV['IOS_APP_ID']}_development_profile-path"], # Developmentプロファイルに変更
      code_signing_identity: "Apple Development"
      team_id: ENV["APPLE_TEAM_ID"]
    )
    gym(
      workspace: "#{ENV['IOS_BUILD_PATH']}/build/Unity-iPhone.xcworkspace",
      scheme: "Unity-iPhone",
      clean: true,
      skip_profile_detection: true,
      codesigning_identity: "Apple Development",
      export_method: "development", # developmentビルド用に設定
      export_options: {
        method: "development",
        provisioningProfiles: {
          ENV["IOS_APP_ID"] => "match Development #{ENV['IOS_APP_ID']}" # Developmentプロファイルに変更
        }
        team_id: ENV["APPLE_TEAM_ID"]
      }
    )
  end

  desc "Synchronize development certificates"
  lane :certificates do
    cleanup_keychain
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      lock_when_sleeps: true,
      timeout: 3600,
      unlock: true
    )
    match(
      type: "development",  # Development用に変更
      app_identifier: "#{ENV['IOS_APP_ID']}",
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )
  end

  lane :cleanup_keychain do
    if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))
      delete_keychain(name: keychain_name)
    end
  end

  after_all do
    if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))
      delete_keychain(name: keychain_name)
    end
  end
end